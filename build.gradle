/*
 * Copyright 2022 Storebrand ASA
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.github.spotbugs" version "5.0.5"
}

// GradleWrapper version specifier.
wrapper { gradleVersion = "7.3.3" }

allprojects {
    group 'com.storebrand.scheduledtask'
    version '0.1.8+2024-08-28'
}

subprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.spotbugs'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.incremental = true
        options.compilerArgs += ['-Werror', '-Xlint:all', '-Xlint:-serial']
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        // without the -quiet option, the build fails due to errors&warns
        options.addStringOption('Xdoclint:none', '-quiet')
        options.encoding = 'UTF-8'
    }

    // Common versions
    ext {
        slf4jVersion = '1.7.36'
        junitVersion = '5.8.2'
        healthCheckVersion = '0.4.1+2024-05-07'
        springVersion = '5.3.20'
        javaxInjectVersion = '1'
        logbackClassicVersion = '1.2.11'
    }

    dependencies {
        // Spotbug annotations only required at compiletime
        compileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.3'
        testCompileOnly 'com.github.spotbugs:spotbugs-annotations:4.5.3'
    }

    project.buildDir = 'build-gradle'

    repositories { mavenCentral() }

    task allDependencies(type: DependencyReportTask) {}

    spotbugs {
        toolVersion = '4.5.3'
    }

    // To generate an HTML report and XML report
    tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
        reports {
            xml.required.set(false)
            html.required.set(true)
        }
    }

    signing {
        // using findProperty(..) to be able to build without it being defined.
        def signingKeyId = findProperty("signingKeyId") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT_"
        def signingKey = findProperty("signingKey") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT_"
        def signingPassword = findProperty("signingPassword") as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT_"
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

        sign publishing.publications
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    name = 'Storebrand ScheduledTask'
                    description = 'Library for scheduling recurring tasks in a reliable way .'
                    url = 'https://github.com/storebrand/scheduledtask'
                    licenses {
                        license {
                            name = 'Apache License 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0'
                        }
                    }
                    developers {
                        developer {
                            id = 'DagBertelsen'
                            name = 'Dag Bertelsen'
                            email = 'dabe@dagbertelsen.com'
                        }
                        developer {
                            id = 'khiim'
                            name = 'Kristian Hiim'
                            email = 'kristian@hiim.no'
                        }
                        developer {
                            id = 'stolsvik'
                            name = 'Endre St√∏lsvik'
                            email = 'endre@stolsvik.com'
                        }
                    }
                    scm {
                        connection = 'scm:git:https://github.com/storebrand/scheduledtask.git'
                        developerConnection = 'scm:git:ssh://github.com:storebrand/scheduledtask.git'
                        url = 'https://github.com/storebrand/scheduledtask'
                    }
                }
                from components.java
            }
        }
        repositories {
            maven {
                name 'SonatypeOSSRHSnapshot'
                // NOTE: GroupId no.storebrand uses "oss.sonatype.org", while com.storebrand uses "s01.oss.sonatype.org"
                url 'https://s01.oss.sonatype.org/content/repositories/snapshots'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT_"
                    password findProperty('sonatypePassword') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT_"
                }
            }
            maven {
                name 'SonatypeOSSRHStaging'
                // NOTE: GroupId no.storebrand uses "oss.sonatype.org", while com.storebrand uses "s01.oss.sonatype.org"
                url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2'
                credentials {
                    // using findProperty(..) to be able to build without it being defined.
                    username findProperty('sonatypeUsername') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                    password findProperty('sonatypePassword') as String ?: "Either project prop, or env with prefix ORG_GRADLE_PROJECT"
                }
            }
        }
    }
    // "Alias-tasks" to publish to Sonatype's OSSRH (OSS Repository Hosting), Snapshot and Staging
    task publishSnapshot(dependsOn: [publishAllPublicationsToSonatypeOSSRHSnapshotRepository])
    task publishStaging(dependsOn: [publishAllPublicationsToSonatypeOSSRHStagingRepository])
}
